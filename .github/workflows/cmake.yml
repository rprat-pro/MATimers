name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: mpi4py/setup-mpi@v1
    - name: Install libtclap-dev
      run: sudo apt-get install -y libtclap-dev catch2


    - name: Configure CMake
      run: cmake -DMATOOLS_TESTING=ON -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      
    - name: Code Coverage Summary Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: coverage.cobertura.xml

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C --rerun-failed --output-on-failure ${{env.BUILD_TYPE}}

    - name: Configure CMake no MPI
      run: cmake -DMATOOLS_MPI=OFF -DMATOOLS_TESTING=ON -B ${{github.workspace}}/build-no-mpi -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build no MPI
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build-no-mpi --config ${{env.BUILD_TYPE}}

    - name: Test no MPI
      working-directory: ${{github.workspace}}/build-no-mpi
      run: ctest -C --rerun-failed --output-on-failure ${{env.BUILD_TYPE}}
      
    - name: Produce the coverage report
      uses: insightsengineering/coverage-action@v2
      with:
        # Path to the Cobertura XML report.
        path: ./coverage.cobertura.xml
        # Minimum total coverage, if you want to the
        # workflow to enforce it as a standard.
        # This has no effect if the `fail` arg is set to `false`.
        threshold: 80.123
        # Fail the workflow if the minimum code coverage
        # reuqirements are not satisfied.
        fail: true
        # Publish the rendered output as a PR comment
        publish: true
        # Create a coverage diff report.
        diff: true
        # Branch to diff against.
        # Compare the current coverage to the coverage
        # determined on this branch.
        diff-branch: main
        # This is where the coverage reports for the
        # `diff-branch` are stored.
        # Branch is created if it doesn't already exist'.
        diff-storage: _xml_coverage_reports
        # A custom title that can be added to the code
        # coverage summary in the PR comment.
        coverage-summary-title: "Code Coverage Summary"
